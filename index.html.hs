{-# LANGUAGE OverloadedStrings #-}
-- vim: sw=2

import Prelude hiding (div, span)
import qualified Prelude as P
import Data.Monoid (mempty)
import qualified Data.Text as T

import Text.Blaze.Html5
import qualified Text.Blaze.Html5 as H
import Text.Blaze.Html5.Attributes hiding (label, form, span)
import qualified Text.Blaze.Html5.Attributes as A

import Text.Blaze.Html.Renderer.String (renderHtml)

import Angular

import System.IO.Unsafe (unsafePerformIO)


elem !. c = elem ! class_ c
elem !# i = elem ! A.id i

js uri = script ! src uri $ mempty
css uri = link ! rel "stylesheet" ! href uri

klass .$ innerHtml = H.div !. klass $ innerHtml
klass .! attr      = H.div !. klass ! attr

-- | Coerce that squirrely string literal
str :: String -> Html
str = toHtml

val :: String -> AttributeValue
val = toValue
-- -

-- For the 'modifiable' directive
modifiable = elemDirective "modifiable"
modData = customAttribute "mod-data"

main = putStrLn $ renderHtml $ do
  docType
  html ! lang "en" $ do
    H.head $ do
      H.title $ "Pose Teaching"
      meta ! httpEquiv "Content-Type" ! content "text/html; charset=utf-8"
      js "linkbot.js"
      js "bower_components/angular/angular.js"
      js "poseTeach.js"
      css "bower_components/bootstrap/dist/css/bootstrap.css"
    body ! ngApp "PoseTeaching" $ div ! ngController "actions" $ do
      adminSidebar
      programListingSection

adminSidebar =
  "sidebar" .$ do
    lllogo
    appTitle
    robotManager

lllogo =
  img !. "sidebar--logo"
      ! src "linkbot-labs-ER-logo-200x46px.png"

appTitle =
  h1 !. "sidebar--title" $ "Pose Teaching"

robotManager = do
  robotForm $ do
    "form-group" .$ do
      roboInputLabel
      roboInput
    connectBtn
  activeRobotDisplay

  where
  activeRobotDisplay = "active-robot" .! ngShow "m.robots !== []"
                                       ! ngRepeat "robot in m.robots" $ do
    "{{robot._id |uppercase}}"
  robotForm = form !. "sidebar--robot-mgr form-inline"
  roboInputLabel = label !. "sr-only" ! for "roboInput" $ "Linkbot ID"
  roboInput = input ! ngModel "m.robotIdInput" !. "form-control"
                    ! type_ "text"
                    ! placeholder "Linkbot ID"
  connectBtn = button !. "form-control" ! ngClick "connect()" $ "+"


programListingSection =
  section !. "program-listing container" $ do
    programControls
    programCode

programControls =
  "program-controls" .$ do
    button ! ngClick "toggleRun()" $ do
      span ! ngIf "! m.moveStatus.timeout" $ "Run"
      span ! ngIf "m.moveStatus.timeout" $ "Pause"
    a ! ngClick "clearProgram()" $ "Clear"

programCode =
  pre !. "program-code" $ do
    "program-code--boilerplate" .$
      pythonBoilerplate
    "program-code--code" .! ngRepeat "pose in m.poses" $ do
      codeLn ""
      codeLn "# Pose {{$index+1}}"
      div ! ngIf "m.robots.length > 1" $ do
        div ! ngRepeat "r in m.robots" $ do
          codeLn $ do
            "linkbot{{$index+1}}.moveToNB("
            modNum "pose[$index][0]" >> ", "
            modNum "pose[$index][1]" >> ", "
            modNum "pose[$index][2]" >> ")"
        div ! ngRepeat "r in m.robots" $ do
          codeLn $ do
            "linkbot{{$index+1}}.moveWait()"
      div ! ngIf "m.robots.length == 1" $ do
        div ! ngRepeat "r in m.robots" $ do
          codeLn $ do
            "linkbot{{$index+1}}.moveTo("
            modNum "pose[$index][0]" >> ", "
            modNum "pose[$index][1]" >> ", "
            modNum "pose[$index][2]" >> ")"

pythonBoilerplate = do
  dongleBoilerplate
  linkbotConnections
  setSpeeds

dongleBoilerplate = mapM_ codeLn
  [ "#!/usr/bin/env python"
  , ""
  , "# This file generated by Linkbot Labs Pose Teaching"
  , ""
  , "import barobo"
  , "dongle = barobo.Dongle()"
  , "dongle.connect()"
  , ""
  ]

linkbotConnections = do
  div ! ngRepeat "r in m.robots" $ do
    codeLn "linkbot{{$index+1}} = dongle.getLinkbot('{{r._id | uppercase}}')"
  codeLn ""

setSpeeds = do
  div ! ngRepeat "r in m.robots" $ do
    codeLn $ do
      "linkbot{{$index+1}}.setJointSpeeds("
      modNum "m.speeds[$index][0]" >> ", "
      modNum "m.speeds[$index][1]" >> ", "
      modNum "m.speeds[$index][2]" >> ")"
  codeLn ""

codeLn = (>> br)

modNum dataRef =
  modifiable ! customAttribute "number" "true"
             ! modData (val dataRef) $
      span ! A.style "border-bottom: 1px dotted black" $
        str $ template $ T.pack $ dataRef ++ " |number:1"
